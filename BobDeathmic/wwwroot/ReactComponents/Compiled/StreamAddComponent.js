"use strict"; function _instanceof(e, t) { return null != t && "undefined" != typeof Symbol && t[Symbol.hasInstance] ? !!t[Symbol.hasInstance](e) : e instanceof t } function _typeof(e) { return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(e) } function _classCallCheck(e, t) { if (!_instanceof(e, t)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(e, t) { for (var a = 0; a < t.length; a++) { var n = t[a]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n) } } function _createClass(e, t, a) { return t && _defineProperties(e.prototype, t), a && _defineProperties(e, a), e } function _inherits(e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function"); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), t && _setPrototypeOf(e, t) } function _setPrototypeOf(e, t) { return (_setPrototypeOf = Object.setPrototypeOf || function (e, t) { return e.__proto__ = t, e })(e, t) } function _createSuper(e) { var t = _isNativeReflectConstruct(); return function () { var a, n = _getPrototypeOf(e); if (t) { var i = _getPrototypeOf(this).constructor; a = Reflect.construct(n, arguments, i) } else a = n.apply(this, arguments); return _possibleConstructorReturn(this, a) } } function _possibleConstructorReturn(e, t) { return !t || "object" !== _typeof(t) && "function" != typeof t ? _assertThisInitialized(e) : t } function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e } function _isNativeReflectConstruct() { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Date.prototype.toString.call(Reflect.construct(Date, [], function () { })), !0 } catch (e) { return !1 } } function _getPrototypeOf(e) { return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) } var StreamAddComponent = function (e) { _inherits(a, React.Component); var t = _createSuper(a); function a(e) { var n; return _classCallCheck(this, a), (n = t.call(this, e)).handleSave = n.handleSave.bind(_assertThisInitialized(n)), n.handleLoadCreateForm = n.handleLoadCreateForm.bind(_assertThisInitialized(n)), n.handleCancel = n.handleCancel.bind(_assertThisInitialized(n)), n.handleNameChange = n.handleNameChange.bind(_assertThisInitialized(n)), n.handleUptimeChange = n.handleUptimeChange.bind(_assertThisInitialized(n)), n.handleQuoteChange = n.handleQuoteChange.bind(_assertThisInitialized(n)), n.channelswitch = n.channelswitch.bind(_assertThisInitialized(n)), n.handleTypeClick = n.handleTypeClick.bind(_assertThisInitialized(n)), n.state = { Open: !1, CanSave: !0, StreamName: "", Type: "", UpTime: 0, Quote: 0, Relay: "Aus", Channels: [] }, n } return _createClass(a, [{ key: "handleSave", value: function (e) { if (this.state.CanSave) { var t = new XMLHttpRequest; t.open("POST", "/Stream/Create", !0); var a = this; t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function () { this.readyState === XMLHttpRequest.DONE && 200 === this.status && (a.setState({ Open: !1 }), window.dispatchEvent(new Event("updateTable"))) }, t.send("StreamName=" + this.state.StreamName + "&Type=" + this.state.Type + "&UpTime=" + this.state.UpTime + "&Quote=" + this.state.Quote + "&Relay=" + this.state.Relay) } } }, { key: "handleCancel", value: function (e) { this.setState({ Open: !1 }) } }, { key: "handleNameChange", value: function (e) { "" === e.target.value ? this.setState({ StreamName: e.target.value, CanSave: !1 }) : this.setState({ StreamName: e.target.value, CanSave: !0 }) } }, { key: "handleUptimeChange", value: function (e) { this.setState({ UpTime: e.target.value }) } }, { key: "channelswitch", value: function (e) { var t = e.nativeEvent.target.selectedIndex; this.setState({ Relay: this.state.Channels[t] }) } }, { key: "handleQuoteChange", value: function (e) { this.setState({ Quote: e.target.value }) } }, { key: "handleTypeClick", value: function (e) { this.setState({ Type: e.target.getAttribute("data-type") }) } }, { key: "getTypeSwitchCSSClasses", value: function (e) { var t = "typeswitch"; return e === this.state.Type && (t += " active"), t += " " + e } }, { key: "handleLoadCreateForm", value: function (e) { var t = new XMLHttpRequest, a = this; t.open("GET", "/Stream/RelayChannels", !0), t.onload = function () { if ("" !== t.responseText) { var e = JSON.parse(t.responseText); console.log(e), a.setState({ Open: !0, Channels: e }) } }, t.send(), this.setState({ Open: !0 }) } }, { key: "render", value: function () { if (this.state.Open) { var e = this.state.Channels.map(function (e) { return React.createElement("option", { key: e, value: e }, e) }); return React.createElement("div", null, React.createElement("span", { className: "pointer btn btn_primary mb-3" }, React.createElement("i", { className: "fa fa-plus" }), " Hinzufügen"), React.createElement("div", { className: "statictest grid column-5 row-11" }, React.createElement("label", { className: "namelabel" }, "Streamname"), React.createElement("input", { className: "namefield", name: "streamname", value: this.state.StreamName, onChange: this.handleNameChange, type: "text" }), React.createElement("label", { className: "typelabel" }, "Type"), React.createElement("span", { "data-type": "twitch", onClick: this.handleTypeClick, className: this.getTypeSwitchCSSClasses("twitch") }, "Twitch"), React.createElement("span", { "data-type": "dlive", onClick: this.handleTypeClick, className: this.getTypeSwitchCSSClasses("dlive") }, "D-Live"), React.createElement("span", { "data-type": "mixer", onClick: this.handleTypeClick, className: this.getTypeSwitchCSSClasses("mixer") }, "Mixer"), React.createElement("div", { className: "grid row-2 column-2 timergrid" }, React.createElement("label", { className: "uptimelabel" }, "Uptime Interval"), React.createElement("input", { value: this.state.UpTime, onChange: this.handleUptimeChange, className: "uptimefield", type: "number" }), React.createElement("label", { className: "quotelabel" }, "Quote Interval"), React.createElement("input", { value: this.state.Quote, onChange: this.handleQuoteChange, className: "quotefield", type: "number" })), React.createElement("label", { className: "relaylabel" }, "Relay"), React.createElement("select", { className: "relayselect", value: this.state.RelayChannel, onChange: this.channelswitch }, e), React.createElement("span", { onClick: this.handleSave, className: "btn btn_primary savebtn" }, "Speichern"), React.createElement("span", { onClick: this.handleCancel, className: "btn btn_primary cancelbtn" }, "Abbrechen"))) } return React.createElement("span", { onClick: this.handleLoadCreateForm, className: "pointer btn btn_primary mb-3" }, React.createElement("i", { className: "fa fa-plus" }), " Hinzufügen") } }]), a }();