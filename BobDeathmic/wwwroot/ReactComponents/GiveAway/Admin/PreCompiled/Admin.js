"use strict"; function _instanceof(e, t) { return null != t && "undefined" != typeof Symbol && t[Symbol.hasInstance] ? !!t[Symbol.hasInstance](e) : e instanceof t } function _typeof(e) { return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(e) } function _classCallCheck(e, t) { if (!_instanceof(e, t)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(e, t) { for (var n = 0; n < t.length; n++) { var a = t[n]; a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a) } } function _createClass(e, t, n) { return t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), e } function _possibleConstructorReturn(e, t) { return !t || "object" !== _typeof(t) && "function" != typeof t ? _assertThisInitialized(e) : t } function _getPrototypeOf(e) { return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) } function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e } function _inherits(e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function"); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), t && _setPrototypeOf(e, t) } function _setPrototypeOf(e, t) { return (_setPrototypeOf = Object.setPrototypeOf || function (e, t) { return e.__proto__ = t, e })(e, t) } var ChannelSelector = function (e) { function t(e) { var n; return _classCallCheck(this, t), (n = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, e))).state = { activeChannel: e.Channels[0] }, n.onChange = n.onChange.bind(_assertThisInitialized(n)), n.getOptions = n.getOptions.bind(_assertThisInitialized(n)), n } return _inherits(t, React.Component), _createClass(t, [{ key: "onChange", value: function (e) { var t = e.nativeEvent.target.selectedIndex; this.setState({ activeChannel: this.props.Channels[t] }), this.props.changeSelectedChannel(this.props.Channels[t]) } }, { key: "getOptions", value: function () { var e = 0; return this.props.Channels.map(function (t) { return e++, React.createElement("option", { value: t, key: e }, " ", t) }) } }, { key: "render", value: function () { return React.createElement("div", null, React.createElement("h2", null, "Ausgabe Channel"), React.createElement("select", { onChange: this.onChange, value: this.state.activeChannel }, this.getOptions())) } }]), t }(), CurrentItemInfo = function (e) { function t(e) { return _classCallCheck(this, t), _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, e)) } return _inherits(t, React.Component), _createClass(t, [{ key: "render", value: function () { var e; return e = "" === this.props.Game ? "Test" : this.props.Game, React.createElement("h2", { className: "mb-4" }, React.createElement("a", { href: this.props.Link }, e)) } }]), t }(), NextItemAction = function (e) { function t(e) { var n; return _classCallCheck(this, t), (n = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, e))).handleClick = n.handleClick.bind(_assertThisInitialized(n)), n } return _inherits(t, React.Component), _createClass(t, [{ key: "handleClick", value: function () { this.props.NextItemCall() } }, { key: "render", value: function () { return React.createElement("span", { onClick: this.handleClick, className: "btn mb-4" }, "Nächstes Spiel") } }]), t }(), ParticipantList = function (e) { function t(e) { return _classCallCheck(this, t), _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, e)) } return _inherits(t, React.Component), _createClass(t, [{ key: "render", value: function () { var e = 0, t = this, n = this.props.Participants.map(function (n) { return e++, React.createElement("li", { key: e }, React.createElement("h5", null, n, t.props.currentWinners.includes(n) && React.createElement("i", { style: { color: "gold" }, className: "fas fa-crown ml-2" }))) }); return React.createElement("div", null, React.createElement("h2", null, "Teilnehmer"), React.createElement("ol", null, n)) } }]), t }(), RaffleAction = function (e) { function t(e) { var n; return _classCallCheck(this, t), (n = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, e))).handleClick = n.handleClick.bind(_assertThisInitialized(n)), n } return _inherits(t, React.Component), _createClass(t, [{ key: "handleClick", value: function () { this.props.RaffleCall() } }, { key: "render", value: function () { return React.createElement("span", { onClick: this.handleClick, className: "btn mb-4" }, "Verlosen") } }]), t }(), UI = function (e) { function t(e) { var n; return _classCallCheck(this, t), (n = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, e))).state = { Game: "", Link: "", Participants: [], Channels: [], CurrentChannel: "", CurrentWinners: [] }, n.NextItemCall = n.NextItemCall.bind(_assertThisInitialized(n)), n.RaffleCall = n.RaffleCall.bind(_assertThisInitialized(n)), n.changeSelectedChannel = n.changeSelectedChannel.bind(_assertThisInitialized(n)), n.UpdateParticipantList = n.UpdateParticipantList.bind(_assertThisInitialized(n)), n } return _inherits(t, React.Component), _createClass(t, [{ key: "componentDidMount", value: function () { var e = new XMLHttpRequest; e.open("GET", "/GiveAway/InitialAdminData"); var t = this; e.onload = function () { var n = JSON.parse(e.responseText); t.setState({ Game: n.Item, Link: n.Link, Participants: n.Applicants, Channels: n.Channels, CurrentChannel: n.Channels[0] }) }, e.send(), this.interval = setInterval(this.UpdateParticipantList, 5e3) } }, { key: "componentWillUnmount", value: function () { clearInterval(this.interval) } }, { key: "UpdateParticipantList", value: function () { var e = new XMLHttpRequest; e.open("GET", "/GiveAway/UpdateParticipantList"); var t = this; e.onload = function () { var n = JSON.parse(e.responseText); t.setState({ Participants: n }) }, e.send() } }, { key: "NextItemCall", value: function () { var e = new XMLHttpRequest; e.open("GET", "/GiveAway/NextItem?channel=" + this.state.CurrentChannel, !1), e.send(null); var t = JSON.parse(e.responseText); this.interval = setInterval(this.UpdateParticipantList, 5e3), this.setState({ Game: t.Item, Link: t.Link, Participants: t.Applicants, CurrentWinners: [] }) } }, { key: "RaffleCall", value: function () { var e = new XMLHttpRequest; e.open("GET", "/GiveAway/Raffle?channel=" + this.state.CurrentChannel, !1), e.send(null); var t = JSON.parse(e.responseText); this.setState({ CurrentWinners: t }), clearInterval(this.interval) } }, { key: "changeSelectedChannel", value: function (e) { this.setState({ CurrentChannel: e }) } }, { key: "render", value: function () { return React.createElement("div", null, React.createElement(ChannelSelector, { changeSelectedChannel: this.changeSelectedChannel, Channels: this.state.Channels }), React.createElement(NextItemAction, { NextItemCall: this.NextItemCall }), React.createElement(CurrentItemInfo, { Game: this.state.Game, Link: this.state.Link }), React.createElement(ParticipantList, { currentWinners: this.state.CurrentWinners, Participants: this.state.Participants }), React.createElement(RaffleAction, { RaffleCall: this.RaffleCall })) } }]), t }();